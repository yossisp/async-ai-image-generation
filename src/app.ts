import * as dotenv from 'dotenv'
dotenv.config()

import express, { Application, Request, Response, NextFunction } from 'express'
import { ImageService } from './service/imageService'

interface GenerateImageRequestQuery {
    prompt?: string
}

interface GetImageIsReadyRequestQuery {
    submissionId?: string
}

const PORT: number = 3000
const QSTASH_TOKEN = process.env.QSTASH_TOKEN!
const OPENAI_API_KEY = process.env.OPENAI_API_KEY!
const SERVER_URL = process.env.SERVER_URL! // The URL of our application whose callback Qstash will invoke
const UNABLE_TO_GENERATE_IMAGE = 'UNABLE_TO_GENERATE_IMAGE'
const app: Application = express()
app.use(express.json())

const IMAGE_STATUS = {
    notFound: 'notFound',
    completed: 'completed',
    unableToGenerate: 'unableToGenerate'
}

// Cache to store submission id generated by Qstash and the generated image URL by OpenAI
const CACHE = new Map<string, string>()

// Accept request to generate image
app.get('/generate-image', async (req: Request, res: Response, next: NextFunction) => {
    try {
        const imageGenerationService = new ImageService(
            QSTASH_TOKEN,
            OPENAI_API_KEY,
            SERVER_URL
        )
        
        const query: GenerateImageRequestQuery = req.query
        if (!query.prompt) {
            res.sendStatus(400).json({
                error: {
                    message: 'prompt parameter is missing'
                }
            })
            return
        }
        const submissionId = await imageGenerationService.submit(query.prompt)
        console.info('submission id', submissionId)
        res.send(`Generating image. Your submission id: ${submissionId}`)
    } catch (error) {
        // must pass error to next function in async routes in express
        // https://expressjs.com/en/guide/error-handling.html
        next(error)
    }
    
})

// Qstash will notify at this endpoint with the response from OpenAI
app.post('/image-callback', async (req: Request, res: Response, next: NextFunction) => {
    try {
        const imageService = new ImageService(
            QSTASH_TOKEN,
            OPENAI_API_KEY,
            SERVER_URL
        )
        
        const imageData = imageService.getImageUrl(req.body)
    
        // Save data in cache to retrieve when users ask for their image
        if (imageData.url) {
            CACHE.set(imageData.sourceMessageId, imageData.url);
        } else {
            CACHE.set(imageData.sourceMessageId, UNABLE_TO_GENERATE_IMAGE);
        }
        res.sendStatus(200)
    } catch (error) {
        // must pass error to next function in async routes in express
        // https://expressjs.com/en/guide/error-handling.html
        next(error)
    }
    
})

// Allow users to poll for generated image
app.get('/get-image-is-ready', (req: Request, res: Response) => {
    const query: GetImageIsReadyRequestQuery = req.query

    // Validate request params
    if (!query.submissionId) {
        res.sendStatus(400).json({
            error: {
                message: 'submissionId parameter is missing'
            }
        })
        return
    }

    // Submission id for the image doesn't exist in cache
    const imageUrl = CACHE.get(query.submissionId)
    if (!imageUrl) {
        res.json({
            status: IMAGE_STATUS.notFound
        })
        return
    }

    if (imageUrl === UNABLE_TO_GENERATE_IMAGE) {
        res.json({
            status: IMAGE_STATUS.unableToGenerate
        })
    } else {
        // Image was successfully generated
        res.json({
            status: IMAGE_STATUS.completed,
            imageUrl
        })
    }
})

app.listen(PORT, function () {
    console.info(`Server running on port ${PORT}.`)
})